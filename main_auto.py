# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
from automouse import Ui_Form
import pyautogui

class MainWidget(QtWidgets.QWidget):
    def __init__(self) -> None:
        super().__init__()

    def init(self):
        self.isCapturing = False
        self.isAutoBegin = False
        self.ui.pushButton.clicked.connect(self.slot_capture)
        self.ui.pushButton_2.clicked.connect(self.slot_add)
        self.ui.pushButton_3.clicked.connect(self.slot_start_mouseClick)
        self.ui.pushButton_4.clicked.connect(self.slot_end_mouseClick)
        self.ui.pushButton_5.clicked.connect(self.save_file)
        self.ui.pushButton_6.clicked.connect(self.load_file)
        self.ui.pushButton_8.clicked.connect(self.slot_delone)
        self.ui.pushButton_9.clicked.connect(self.slot_clear)
        self._timer = QtCore.QTimer()
        self._timer.timeout.connect(self.scanClick)
        _time = QtCore.QTime.currentTime()
        self.ui.timeEdit.setTime(_time)

    def slot_capture(self):
        if self.isCapturing:
            _pos = pyautogui.position()
            self.ui.lineEdit.setText(str(_pos.x))
            self.ui.lineEdit_2.setText(str(_pos.y))
            self.ui.pushButton.setText("Capture")
            self.isCapturing = False
        else:
            self.isCapturing = True
            self.ui.pushButton.setText("Capturing.....")
    
    def slot_add(self):
        _row = self.ui.tableWidget.rowCount()
        self.ui.tableWidget.setRowCount(_row + 1)
        _time = self.ui.timeEdit.text()
        _x = self.ui.lineEdit.text()
        _y = self.ui.lineEdit_2.text()
        _item1 = QtWidgets.QTableWidgetItem(_time)
        _item2 = QtWidgets.QTableWidgetItem(_x)
        _item3 = QtWidgets.QTableWidgetItem(_y)
        self.ui.tableWidget.setItem(_row, 0, _item1)
        self.ui.tableWidget.setItem(_row, 1, _item2)
        self.ui.tableWidget.setItem(_row, 2, _item3)

    def slot_start_mouseClick(self):
        if(self.isAutoBegin == False):
            self.isAutoBegin = True
            self._timer.start(500)
            self.ui.pushButton_3.setEnabled(False)
            self.ui.pushButton_4.setEnabled(True)
            self.ui.pushButton_4.setDefault(True)

    def slot_end_mouseClick(self):
        if(self.isAutoBegin):
            self.isAutoBegin = False
            self._timer.stop()
            self.ui.pushButton_3.setEnabled(True)
            self.ui.pushButton_4.setEnabled(False)

    def slot_delone(self):
        _currow = self.ui.tableWidget.currentRow()
        _count = self.ui.tableWidget.rowCount()
        if(_currow >= 0 and _count > 0):
            self.ui.tableWidget.removeRow(_currow)

    def slot_clear(self):
        self.ui.tableWidget.clear()
        self.ui.tableWidget.setRowCount(0)
        self.ui.tableWidget.setHorizontalHeaderLabels(["Click Time", "Position X", "Position Y"])

    def scanClick(self):
        _count = self.ui.tableWidget.rowCount()
        if(_count > 0):
            for i in range(0,_count):
                _timestr = self.ui.tableWidget.item(i,0).text()
                _time = QtCore.QTime.fromString(_timestr)
                if(QtCore.QTime.currentTime() <= _time and _time <= QtCore.QTime.currentTime().addMSecs(500)):
                    _x = self.ui.tableWidget.item(i,1).text()
                    _y = self.ui.tableWidget.item(i,2).text()
                    pyautogui.click(int(_x), int(_y))
    
    def save_file(self):
        _count = self.ui.tableWidget.rowCount()
        if(_count > 0):
            _file = open("clicklist.txt", "w")
            for i in range(0,_count):
                _timestr = self.ui.tableWidget.item(i,0).text()
                _x = self.ui.tableWidget.item(i,1).text()
                _y = self.ui.tableWidget.item(i,2).text()
                _str = _timestr + '-' + _x + '-' + _y + '\n'
                _file.writelines(_str)
            _file.close() 
            print("file successfully saved")

    def load_file(self):
        _file = open("clicklist.txt") 
        _list = _file.read()
        _file.close() 
        _str = _list.split('\n')
        self.slot_clear()
        j = 1
        for i in _str:
            if(len(i) > 0):
                _datalist = i.split('-')
                _timestr = _datalist[0]
                _x = _datalist[1]
                _y = _datalist[2]
                self.ui.tableWidget.setRowCount(j)
                _item1 = QtWidgets.QTableWidgetItem(_timestr)
                _item2 = QtWidgets.QTableWidgetItem(_x)
                _item3 = QtWidgets.QTableWidgetItem(_y)
                self.ui.tableWidget.setItem(j - 1, 0, _item1)
                self.ui.tableWidget.setItem(j - 1, 1, _item2)
                self.ui.tableWidget.setItem(j - 1, 2, _item3)
                j = j + 1
        print("file successfully loaded")


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Form = MainWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.ui = ui
    Form.init()
    Form.show()
    sys.exit(app.exec_())