# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
import time
from widget import Ui_Form

from webdriver_manager.chrome import ChromeDriverManager

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from multiprocessing.pool import ThreadPool
import requests
import threading
import platform
import time
import socket

class MainWidget(QtWidgets.QWidget):
    def __init__(self) -> None:
        super().__init__()

    def init(self):
        self.serverIP = "113.200.102.203"
        self.serverPort1 = 8888
        self.serverPort2 = 10729

        self.updateServerTime()
        self.ui.lineEdit_5.setText("1")
        self._timer = QtCore.QTimer()
        self._timer.timeout.connect(self.updateServerTime)
        self.ui.pushButton_4.clicked.connect(self.signin)
        self.ui.pushButton_5.clicked.connect(self.clickLogin)
        self.ui.comboBox_2.currentIndexChanged.connect(self.updateSessionCombo)
        self.isLogin = False

        my_os = platform.system()
        chrome_options = Options()
        # chrome_options.add_argument("--disable-extensions")
        # chrome_options.add_argument("--disable-gpu")
        # chrome_options.add_argument("--no-sandbox") # linux only
        chrome_options.add_argument("--headless")
        # chrome_options.headless = True # also works
        if(my_os == "Windows"):
            # driver = webdriver.Chrome(r'./chromedriver.exe', options=chrome_options)
            self.driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)
        else:
            self.driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)

    def signin(self):
        # self._timer.stop()
        # self._timer.start(200)
        self.log("Try to login with " + self.ui.comboBox.currentText())
        self.log("Connecting Server....... " + "113.200.102.203:8888")
        self.log("Incomming Connection....... " + "113.200.102.203:10729")
        
        # login information
        link = "https://client.westcoal.com.cn/login"
        _userinfo = self.ui.comboBox.currentText()
        _data = _userinfo.split(",")
        _user = _data[0]
        _pass = _data[1]

        # connectSocket
        self.connectSocket()

        #Web Normal work
        self.trysignin(link, _user, _pass,)

        # Thread work
        # pool = ThreadPool(processes=1)
        # async_res = pool.apply_async(self.trysignin, (link, _user, _pass,))
        # _result = async_res.get()

    def trysignin(self, link, user, password):
        self.driver.get(link)
        time.sleep(3)
        _tag_recaptcha = self.driver.find_element(by=By.CLASS_NAME, value="v-image__image--cover")
        _realimagedata = _tag_recaptcha.screenshot_as_png
        # _style = _tag_recaptcha.get_attribute("style")
        # _recaptcha = _style.split(";")[0].split("(")[1][:-1]
        # print("_recaptcha", _recaptcha)
        
        # New tab open
        # _str = "window.open(" + _recaptcha + ",'_blank')"
        # self.driver.execute_script(_str)
        # self.driver.find_element(by=By.TAG_NAME, value="img")

        _image = QtGui.QImage()
        _image.loadFromData(_realimagedata)
        # Other Way to get image
        # _image.loadFromData(requests.get(_recaptcha).content)
        # _image.loadFromData(requests.get("https://i.seadn.io/gcs/files/96381fb313fc78c87c1452c7fa567d1d.jpg?auto=format&w=128").content)
        self.ui.label_12.setPixmap(QtGui.QPixmap(_image))

        _tag_input = self.driver.find_element(by=By.ID, value="input-19").send_keys(user)
        _tag_password = self.driver.find_element(by=By.ID, value="password").send_keys(password)
        self.ui.pushButton_5.setEnabled(True)

    def log(self, text):
        _time = datetime.datetime.now()
        self.ui.textEdit.append(str(_time.hour)+":"+str(_time.minute)+":"+str(_time.second)+":"+str(_time.microsecond))
        self.ui.textEdit.append(text)

    def updateServerTime(self):
        _time = datetime.datetime.now()
        self.ui.lineEdit_4.setText(str(_time.hour)+":"+str(_time.minute)+":"+str(_time.second)+":"+str(_time.microsecond))

    def clickLogin(self):
        _password_input = self.ui.lineEdit_11.text()
        if(len(_password_input) == 4):
            _tag_vcode = self.driver.find_element(by=By.ID, value="vcode").send_keys(_password_input)

            _tag_submit = self.driver.find_element(by=By.CLASS_NAME, value="v-btn--contained")
            _tag_submit.click()
            time.sleep(3)
            _alert = self.driver.find_elements(by=By.CLASS_NAME, value="v-alert")

            if(len(_alert) == 0):
                self.log("Login Success")
                self.isLogin = True
                self.scrap_sessions()

            else:
                self.log("Login Fail")
                _tag_recaptcha = self.driver.find_element(by=By.CLASS_NAME, value="v-image__image--cover")
                _realimagedata = _tag_recaptcha.screenshot_as_png
                _image = QtGui.QImage()
                _image.loadFromData(_realimagedata)
                self.ui.label_12.setPixmap(QtGui.QPixmap(_image))

        else:
            self.log("Please type recaptcha")

    def scrap_sessions(self):
        self._session_lists = self.driver.find_elements(By.CSS_SELECTOR, "div[class='col-sm-6 col-md-4 col-lg-3 col-xl-2 col-12']")
        # _session_lists = self.driver.find_elements(by=By.CLASS_NAME, value="v-card__title")
        self.isUpdate = True
        for x in self._session_lists:
            _result = x.find_element(By.CSS_SELECTOR, "div[class='subtitle-1 d-inline-block pl-2 font-weight-bold']")
            self.ui.comboBox_2.addItem(_result.text)
        self.isUpdate = False
        if(len(self._session_lists) > 0):
            self.updateSessionCombo(0)

    def updateSessionCombo(self, index):
        if(self.isUpdate):
            return
        self.log('Enter Session :' + self.ui.comboBox_2.currentText())
        self.ui.comboBox_3.clear()
        if(len(self._session_lists) < index):
            self.log('Cant Get Session Information')
        elif(self.driver.current_url == "https://client.westcoal.com.cn/trade"):
            self._session_lists[index].click()
        else:
            self.driver.back()
            self._session_lists[index].click()

        self.log('Get Session target numbers')
        time.sleep(3)
        _targets = self.driver.find_elements(By.CSS_SELECTOR, "div[class='row pa-2 row--dense']")
        for x in _targets:
            _spans = x.find_elements(By.TAG_NAME, "span")
            if(len(_spans) > 1):
                self.ui.comboBox_3.addItem(_spans[1].text)

    def connectSocket(self):
        print("connect socket")
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.serverIP, self.serverPort1))
                s.send(b"88ff01000100080001718356312e3200373030303332373100000000000000002e21caa4fd40d42d1b78b6a02e820f1b95e043cbeadaaeade69b186a431610a34a97f5daa2085de23fe5d5c9672b6add796a0792914567fed2d6a5f88183be52723e0d023734356749800fcfda5e6eefdb1331ef8da5a4ce3654fc3f37d507b529b0cfc1fa82c2d77f33ddc043761762a1a1d18410b427a491aac45f56f0c53908299613c24f3a3ca299d8b1f482eac070c02de9248df2758aaa913e2d27dce42ab5e8640c9a4adafe172f884f3431ecca9aa11a4c9ba59fdcea026c78180d515b695871ab4f9551039928a2350755c11ae2a842d51ec1ce44288fa93714ede6e01f6ad7aa54cea02a595c4de494dade2c020591ceaf692d61aaed7be83e7111")
                _data = s.recv(1024)
                print("socket data", _data)
        except:
            print("Socket Connect Failed")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Form = MainWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.ui = ui
    Form.show()
    Form.init()
    sys.exit(app.exec_())
